create or replace view V_UAS_PAT_ASSESSMENTS as 
WITH
ASS as 
(
    SELECT
        /*+ materialize no_merge driving_site(a) */ 
        DL_ASSESS_SK, ASSESSMENTDATE, ONURSEDATE, MEMBER_ID, ONURSEORG_CATEGORY, ONURSEORG_GROUP 
    FROM CHOICE.DIM_MEMBER_ASSESSMENTS@DLAKE A
    LEFT JOIN CHOICE.REF_NURSE@DLAKE C ON (A.DL_NURSE_SK=C.DL_NURSE_SK)
    LEFT JOIN CHOICE.REF_ASSESSING_VENDOR@DLAKE D ON (C.DL_ASSESS_VENDOR_SK=D.DL_ASSESS_VENDOR_SK)
) 
, UAS AS 
(
SELECT 
       /*+ materialize no_merge driving_site(b) */
       A.DL_ASSESS_SK 
     , TO_CHAR(A.ASSESSMENTDATE, 'yyyymm') AS ASSESSMENTMONTH
     , A.MEMBER_ID 
     --, TRUNC(A.ONURSEDATE) AS ONURSEDATE
     , B.*
     , ROW_NUMBER () OVER (PARTITION BY A.MEMBER_ID, A.ASSESSMENTDATE ORDER BY A.DL_ASSESS_SK DESC) AS UAS_VRSN_SEQ_DESC -- version of the assessment in descendig order (i.e. 1=latest version)
     , ROW_NUMBER () OVER (PARTITION BY A.MEMBER_ID, A.ASSESSMENTDATE ORDER BY A.ONURSEDATE, A.DL_ASSESS_SK) AS UAS_VRSN_SEQ -- version of the assessment in ascending order (i.e. 1=first version)
     , DENSE_RANK () OVER (PARTITION BY A.MEMBER_ID ORDER BY A.ASSESSMENTDATE DESC) AS UAS_SEQ_DESC --nth assessment for a member - in descending order (i.e. 1=most recent)
     , DENSE_RANK () OVER (PARTITION BY A.MEMBER_ID ORDER BY A.ASSESSMENTDATE) AS UAS_SEQ   --nth assessment for a member - in ascending order (i.e. 1=first)  
     , CASE WHEN A.ONURSEORG_CATEGORY IS NULL THEN A.ONURSEORG_GROUP
            WHEN A.ONURSEORG_CATEGORY IN('ALLIED','ICS') THEN A.ONURSEORG_CATEGORY
            ELSE 'VNSNY CHOICE'
      END AS ONURSEORG_CAT
FROM ASS A
LEFT JOIN DW_OWNER.UAS_PAT_ASSESSMENTS@NEXUS2 B ON(A.DL_ASSESS_SK=B.RECORD_ID)
)
, MNTS_BETWEEN AS
(
    SELECT 
        /*+ no_merge materialize */
         MEMBER_ID, ASSESSMENTDATE, ASSESSMENTMONTH
        , LAG(DL_ASSESS_SK, 1) OVER (PARTITION BY MEMBER_ID ORDER BY ASSESSMENTMONTH) as DL_ASSESS_SK_PRIOR_ASSESS
        , MONTHS_BETWEEN(TO_DATE(ASSESSMENTMONTH, 'YYYYMM'), LAG(TO_DATE(ASSESSMENTMONTH, 'YYYYMM'), 1) 
                OVER (PARTITION BY MEMBER_ID ORDER BY ASSESSMENTMONTH)) AS MONTHS_SINCE_PRIOR_ASSESS --MONTHS BETWEN ASSESSMENT AND PRIOR ASSESSMENT
    FROM UAS C
    WHERE 1=1
    AND UAS_VRSN_SEQ_DESC=1
)
SELECT 
    /*+ no_merge materialize */
      A.*
    , B.DL_ASSESS_SK_PRIOR_ASSESS
    , B.MONTHS_SINCE_PRIOR_ASSESS
    , CASE WHEN COMMUNITY.RECORD_ID IS NULL THEN 0 ELSE 1 END AS COMMUNITY_IND
    , CASE WHEN CHA.RECORD_ID IS NULL THEN 0 ELSE 1 END AS CHA_IND
    , CASE WHEN MENTAL.RECORD_ID IS NULL THEN 0 ELSE 1 END AS MENTAL_IND
    , CASE WHEN SC.RECORD_ID IS NULL THEN 0 ELSE 1 END AS SCALE_IND
    , CASE WHEN RUG.RECORD_ID IS NULL THEN 0 ELSE 1 END AS RUG_IND   
    , CASE WHEN DX.RECORD_ID IS NULL THEN 0 ELSE 1 END AS DX_IND   
    , CASE WHEN RX.RECORD_ID IS NULL THEN 0 ELSE 1 END AS RX_IND     
FROM UAS A 
         JOIN MNTS_BETWEEN B ON(A.MEMBER_ID=B.MEMBER_ID AND A.ASSESSMENTDATE=B.ASSESSMENTDATE)
    LEFT JOIN DW_OWNER.UAS_COMMUNITYHEALTH@NEXUS2 COMMUNITY ON (COMMUNITY.RECORD_ID = A.DL_ASSESS_SK)
    LEFT JOIN DW_OWNER.UAS_CHASUPPLEMENT@NEXUS2 CHA ON (CHA.RECORD_ID = A.DL_ASSESS_SK)
    LEFT JOIN DW_OWNER.UAS_MENTALHEALTH@NEXUS2 MENTAL ON (MENTAL.RECORD_ID = A.DL_ASSESS_SK)
    LEFT JOIN (SELECT DISTINCT RECORD_ID FROM DW_OWNER.UAS_SCALE@NEXUS2) SC ON (SC.RECORD_ID = A.DL_ASSESS_SK)
    LEFT JOIN (SELECT DISTINCT RECORD_ID FROM DW_OWNER.UAS_RUG@NEXUS2) RUG ON (RUG.RECORD_ID = A.DL_ASSESS_SK)
    LEFT JOIN (SELECT DISTINCT RECORD_ID FROM DW_OWNER.UAS_ASSES_DISEASE@NEXUS2) DX ON (DX.RECORD_ID = A.DL_ASSESS_SK)
    LEFT JOIN (SELECT DISTINCT RECORD_ID FROM DW_OWNER.UAS_MEDICATION@NEXUS2) RX ON (RX.RECORD_ID = A.DL_ASSESS_SK)
;



GRANT SELECT ON V_UAS_PAT_ASSESSMENTS TO LINKADM;

GRANT SELECT ON V_UAS_PAT_ASSESSMENTS TO LINKADM2;

GRANT SELECT ON V_UAS_PAT_ASSESSMENTS TO MSTRSTG;

GRANT SELECT ON V_UAS_PAT_ASSESSMENTS TO ROC_RO;

GRANT SELECT ON V_UAS_PAT_ASSESSMENTS TO ROC_RO2;
